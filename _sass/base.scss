$color-bg: var(--color-bg);
$color-text: var(--color-text);
$color-text-muted: var(--color-text-muted);

$font-size-1: 3rem;
$font-size-2: 2.5rem;
$font-size-3: 2rem;
$font-size-4: 1.5rem;
$font-size-5: 1.25rem;
$font-size-6: 1rem;

$max-staggered-element: 50;

%font-display {
  font-family: "Noto Serif Display", serif !important;
  font-optical-sizing: auto;
  font-variation-settings: "wdth" 100;
}

.font-display {
  @extend %font-display;
}

%font-mono {
  font-family: "JetBrains Mono", monospace;
  font-optical-sizing: auto;
}

.font-mono {
  @extend %font-mono;
}

::selection {
  background: var(--color-accent); /* Highlight color */
  color: var(--color-bg); /* Text color */
}

html {
  margin: 0px 0px 0px 0px;
  padding: 0px 0px 0px 0px;
  min-width: 100vw;
  min-height: 100vh;
}

body {
  @extend html;
  @extend %font-mono;

  // background: linear-gradient(to right, color-mix(in srgb, $color-bg, transparent 100%) 0%, $color-bg 10%, $color-bg 90%, color-mix(in srgb, $color-bg, transparent 100%) 100%);
  // background-attachment: fixed;
  // background-position: center;
  // background-repeat: no-repeat;
  background-color: $color-bg;
  color: $color-text;

  display: flex;
  flex-flow: column;
  // display: grid;
  // grid-template-rows: auto 1fr auto;
  // grid-template-columns: 100%;

}

header, footer {
  flex: 0 1 auto;

}

main {
  flex: 1 1 auto;
  display: flex;
  flex-flow: column nowrap;
  min-height: 0;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 800;
  color: var(--color-text);
  margin-bottom: 1rem;

  &:not(:first-child) {
    margin-top: 2rem;
  }

  &+hr {
    margin-top: -0.5rem;
  }
}

h1 + h2,
h2 + h3,
h3 + h4,
h4 + h5,
h5 + h6 {
  margin-top: -0.5em !important;
}

h1,
h2,
h3 {
  @extend %font-display;
}

h4,
h5,
h6 {
  @extend %font-mono;
}

h1 {
  font-size: $font-size-1;
}
h2 {
  font-size: $font-size-2;
}
h3 {
  font-size: $font-size-3;
}
h4 {
  font-size: $font-size-4;
}
h5 {
  font-size: $font-size-5;
}
h6 {
  font-size: $font-size-6;
}

h1,
h2,
h3 {
  opacity: 1;
}

h4 {
  opacity: 0.8;
}

h5,
h6 {
  opacity: 0.7;
  font-style: italic;
}

a {
  color: var(--color-accent) !important;
  text-decoration: none;
}

ul {
  margin-left: 1rem;
  li::before {
    content: "â€¢";
    margin-right: 0.5rem;
    color: var(--color-text-muted);
    opacity: 0.6;
  }
  ul {
    position: relative;
    margin-left: 1em;
  }
  ul::before {
    position: absolute;
    content: "";
    border: 1px solid color-mix(in srgb, $color-text-muted, transparent 95%);
    left: -0.8em;
    top: -0.2rem;
    bottom: -0.2rem;
  }
}

hr {
  margin: 0.7rem 1rem 1rem 1rem;
}

// hr {
//   height: 1px;
//   // background: -webkit-gradient(linear, 0 0, 100% 0, from(rgba(0, 0, 0, 0)), color-stop(0.5, var(--color-text-muted)), to(rgba(0, 0, 0, 0)));
//   // background: -webkit-linear-gradient(left, rgba(0, 0, 0, 0), var(--color-text-muted), rgba(0, 0, 0, 0));
//   // background: -moz-linear-gradient(left, rgba(0, 0, 0, 0), var(--color-text-muted), rgba(0, 0, 0, 0));
//   // background: -o-linear-gradient(left, rgba(0, 0, 0, 0), var(--color-text-muted), rgba(0, 0, 0, 0));
//   // background: linear-gradient(left, rgba(0, 0, 0, 0), var(--color-text-muted), rgba(0, 0, 0, 0));
//   background: linear-gradient(to left, rgba(0, 0, 0, 0.1), color-mix(in srgb, var(--color-text-muted), transparent 70%), rgba(255, 0, 0, 0.1));
// }

@mixin slide-in($direction, $distance: 10px) {
  $name: slideIn-#{$direction};

  @if $direction == top {
    transform: translateY(-$distance);
  } @else if $direction == right {
    transform: translateX($distance);
  } @else if $direction == bottom {
    transform: translateY($distance);
  } @else if $direction == left {
    transform: translateX(-$distance);
  }

  animation-name: #{$name};

  @keyframes #{$name} {
    to {
      opacity: 1;
      transform: translate(0, 0);
    }
  }
}

.animate-on-load {
  flex: 1 1 auto;
  display: flex;
  flex-flow: column;
  > * {
    opacity: 0;
    $stagger: 0;
    $delay: 30ms;
    $start: 0ms;
    $slide-duration: 1s;
    
    animation-fill-mode: forwards;
    animation-duration: $slide-duration;
    @for $x from 1 through $max-staggered-element{
      &:nth-child(#{$x}) { 
        $stagger: #{$x}; 
        animation-delay: calc($start + $stagger * $delay) !important;  
      }
    }
  }
  &[data-slide="top"]    { > * { @include slide-in(top); } }
  &[data-slide="right"]  { > * { @include slide-in(right); } }
  &[data-slide="bottom"] { > * { @include slide-in(bottom); } }
  &[data-slide="left"]   { > * { @include slide-in(left); } }
}

.ripple-matrix-container {
  flex: 1 1 auto;
  position: relative;
  .ripple-matrix {
    position: absolute;
    display: block;
    pointer-events: auto;
  }
}